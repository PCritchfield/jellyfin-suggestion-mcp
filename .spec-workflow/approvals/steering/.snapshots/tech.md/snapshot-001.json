{
  "id": "snapshot_1759107309852_81n87n4bh",
  "approvalId": "approval_1759107309843_t00nfibkk",
  "approvalTitle": "Tech Steering Document - TypeScript MCP Server Architecture",
  "version": 1,
  "timestamp": "2025-09-29T00:55:09.852Z",
  "trigger": "initial",
  "status": "pending",
  "content": "# Technology Stack\n\n## Project Type\n**MCP Server**: A Model Context Protocol server that bridges AI assistants with Jellyfin media libraries, enabling conversational media discovery through structured tool interfaces.\n\n## Core Technologies\n\n### Primary Language(s)\n- **Language**: TypeScript (targeting ES2022)\n- **Runtime/Compiler**: Node.js 18+ with native ESM support\n- **Language-specific tools**: \n  - **Package Manager**: Yarn with lockfile-based dependency management\n  - **Build System**: TypeScript Compiler (tsc) with strict type checking\n  - **Development Runtime**: tsx for hot reloading during development\n\n### Key Dependencies/Libraries\n- **@modelcontextprotocol/sdk ^1.17.2**: Core MCP protocol implementation for server creation and request handling\n- **axios ^1.11.0**: HTTP client for Jellyfin API communication with request/response interceptors\n- **zod ^4.0.17**: Runtime type validation and schema parsing for API inputs/outputs\n- **dotenv ^17.2.1**: Environment variable management for configuration\n- **yaml ^2.8.1**: YAML parsing for specification loading and validation\n\n### Application Architecture\n**Event-Driven MCP Server Architecture**:\n- **Request-Response Pattern**: Handles MCP protocol requests (tools, resources) via registered handlers\n- **Authentication Layer**: Pluggable authentication with session management and token-based API access\n- **Client Abstraction**: JellyfinClient wrapper providing type-safe API access with error handling\n- **Schema Validation**: Input/output validation using Zod schemas ensuring type safety\n- **Recommendation Engine**: Pluggable ranking system for similarity matching and personalization\n\n### Data Storage (if applicable)\n- **Primary storage**: External Jellyfin server database (PostgreSQL/SQLite) - read-only access\n- **Caching**: In-memory session storage for authentication tokens and pending requests\n- **Data formats**: JSON for MCP protocol communication, YAML for specification files\n\n### External Integrations (if applicable)\n- **APIs**: Jellyfin Server REST API (10.8+) for media library access\n- **Protocols**: HTTP/REST over configurable base URLs, MCP over stdio transport\n- **Authentication**: Jellyfin API token authentication with username/password fallback\n\n### Monitoring & Dashboard Technologies (if applicable)\n- **Dashboard Framework**: CLI-based development tools and test harnesses\n- **Real-time Communication**: stdio transport for MCP protocol communication\n- **Visualization Libraries**: JSON pretty-printing for debug output and API responses\n- **State Management**: In-memory session state with authentication token persistence\n\n## Development Environment\n\n### Build & Development Tools\n- **Build System**: TypeScript compiler with source maps and declaration files\n- **Package Management**: Yarn with frozen lockfiles and dependency auditing\n- **Development workflow**: \n  - **Hot Reload**: tsx for immediate TypeScript execution\n  - **Watch Mode**: File watching for automatic rebuilds\n  - **CLI Tools**: Dedicated test utilities for connection and authentication testing\n\n### Code Quality Tools\n- **Static Analysis**: \n  - ESLint 9.33+ with TypeScript support and strict configuration\n  - TypeScript strict mode with exactOptionalPropertyTypes and noUncheckedIndexedAccess\n- **Formatting**: ESLint auto-fix with consistent code style enforcement\n- **Testing Framework**: \n  - Custom test harness for MCP specification compliance\n  - Integration tests for Jellyfin API communication\n  - Authentication flow testing utilities\n- **Documentation**: Inline JSDoc comments with TypeScript declaration generation\n\n### Version Control & Collaboration\n- **VCS**: Git with conventional commits and semantic versioning\n- **Branching Strategy**: Trunk-based development with main branch\n- **Code Review Process**: \n  - **Pre-commit hooks**: Automated code quality checks with husky\n  - **CI/CD Integration**: Automated linting, type checking, and security auditing\n  - **Semantic Release**: Automated versioning and changelog generation\n\n### Dashboard Development (if applicable)\n- **Live Reload**: Development server with automatic restart on file changes\n- **Port Management**: stdio-based communication (no port conflicts)\n- **Multi-Instance Support**: Session-isolated authentication allowing multiple concurrent users\n\n## Deployment & Distribution (if applicable)\n- **Target Platform(s)**: Node.js environments (local development, CI/CD, production servers)\n- **Distribution Method**: \n  - **NPM Registry**: Published as `jellyfin-suggestion-mcp` for global installation\n  - **NPX Support**: Zero-install usage via `npx jellyfin-suggestion-mcp@latest`\n- **Installation Requirements**: Node.js 18+, network access to Jellyfin server\n- **Update Mechanism**: NPM/Yarn package updates with semantic versioning\n\n## Technical Requirements & Constraints\n\n### Performance Requirements\n- **Response Time**: < 2 seconds for ≤ 24 items on ≤ 20k-item libraries\n- **Memory Usage**: Minimal memory footprint with streaming JSON processing\n- **Concurrency**: Single-threaded with async/await patterns for I/O operations\n- **Library Size**: Efficient handling of large media libraries (20k+ items)\n\n### Compatibility Requirements  \n- **Platform Support**: Node.js 18+ on Linux, macOS, Windows\n- **Dependency Versions**: \n  - MCP SDK 1.17+, Jellyfin Server 10.8+\n  - TypeScript 5.9+, ESLint 9.33+\n- **Standards Compliance**: \n  - MCP Protocol 1.2+ specification compliance\n  - OpenAPI-compatible tool schemas\n  - JSON Schema validation for all inputs/outputs\n\n### Security & Compliance\n- **Security Requirements**: \n  - No credential storage in memory or logs\n  - Secure token-based authentication with automatic expiration\n  - Input sanitization and output redaction (file paths, stream URLs)\n- **Compliance Standards**: Read-only access patterns, GDPR-compatible (no PII storage)\n- **Threat Model**: \n  - **Network Security**: HTTPS for Jellyfin communication, configurable base URLs\n  - **Input Validation**: All user inputs validated via Zod schemas\n  - **Output Sanitization**: Sensitive data automatically redacted from responses\n\n### Scalability & Reliability\n- **Expected Load**: Single-user sessions with moderate request volume (< 10 RPS)\n- **Availability Requirements**: Graceful degradation with authentication errors\n- **Growth Projections**: Support for multiple Jellyfin instances and enhanced recommendation algorithms\n\n## Technical Decisions & Rationale\n\n### Decision Log\n1. **TypeScript with Strict Configuration**: Chosen for type safety in MCP protocol handling and Jellyfin API integration. Strict settings prevent common runtime errors in AI-driven environments.\n\n2. **Zod for Runtime Validation**: Selected over alternatives like Joi for better TypeScript integration and zero-dependency validation of MCP inputs, ensuring protocol compliance.\n\n3. **Axios over Fetch**: Preferred for mature error handling, request/response interceptors for authentication, and better compatibility with legacy Node.js versions.\n\n4. **In-Memory Session Management**: Simplified approach avoiding persistent storage complexity while maintaining security through token-based authentication patterns.\n\n5. **Task Runner over NPM Scripts**: Task (Taskfile.yml) provides better organization of complex development workflows and cross-platform compatibility.\n\n## Known Limitations\n\n- **Single Session Limitation**: Currently supports one authenticated user per MCP server instance (concurrent user support planned)\n- **Basic Recommendation Engine**: Simple similarity matching algorithm (advanced ML-based recommendations in roadmap)\n- **No Offline Support**: Requires active network connection to Jellyfin server for all operations\n- **Memory-Only Caching**: No persistent caching of library metadata (Redis/disk caching under consideration)\n",
  "fileStats": {
    "size": 7827,
    "lines": 142,
    "lastModified": "2025-09-29T00:55:02.981Z"
  },
  "comments": []
}