{
  "id": "snapshot_1759108049968_gkbxpcpwv",
  "approvalId": "approval_1759107855266_zc5sqw8ww",
  "approvalTitle": "Structure Steering Document - Codebase Organization & Patterns",
  "version": 2,
  "timestamp": "2025-09-29T01:07:29.968Z",
  "trigger": "approved",
  "status": "pending",
  "content": "# Project Structure\n\n## Directory Organization\n\n```\njellyfin-suggestion-mcp/\n├── src/                        # TypeScript source code\n│   ├── index.ts               # Main MCP server implementation & request handlers\n│   ├── cli.ts                 # CLI entry point for npx execution\n│   ├── jellyfin.ts            # Jellyfin API client with session management\n│   ├── auth.ts                # Authentication manager & session handling\n│   ├── schema.ts              # Zod schemas for input validation\n│   ├── spec.ts                # YAML specification loader\n│   ├── resources.ts           # MCP resource handlers (library snapshots)\n│   ├── ranker.ts              # Recommendation ranking algorithms\n│   ├── prompts.ts             # User interaction prompts (if applicable)\n│   └── test-*.ts              # Integration testing utilities\n├── dist/                       # Compiled JavaScript output\n├── .spec-workflow/             # Specification workflow files\n│   ├── templates/             # Document templates\n│   └── steering/              # Project steering documents\n├── docs/                       # Documentation files\n│   ├── README.md              # Project overview & quick start\n│   ├── SETUP.md               # Detailed setup instructions\n│   ├── AUTHENTICATION.md      # Authentication guide\n│   └── SECURITY.md            # Security best practices\n├── jellyfin-mcp.spec.yaml    # Machine-readable MCP specification\n├── package.json               # Dependencies & scripts\n├── tsconfig.json              # TypeScript configuration\n├── Taskfile.yml               # Task automation\n└── [CI/build config files]    # Various config files\n```\n\n## Naming Conventions\n\n### Files\n- **Core Components**: `PascalCase` for classes, `kebab-case` for standalone utilities\n- **Entry Points**: `index.ts` (main server), `cli.ts` (command-line interface)\n- **Integration Layer**: `jellyfin.ts`, `auth.ts` for external service integration\n- **Data Layer**: `schema.ts`, `spec.ts` for validation and configuration\n- **Testing Utilities**: `test-[purpose].ts` pattern for specific test scenarios\n\n### Code\n- **Classes/Interfaces**: `PascalCase` (`JellyfinClient`, `AuthSession`)\n- **Functions/Methods**: `camelCase` (`authenticateUser`, `listItems`)\n- **Constants**: `UPPER_SNAKE_CASE` for environment variables, `camelCase` for local constants\n- **Variables**: `camelCase` throughout, descriptive names preferred\n\n## Import Patterns\n\n### Import Order\n1. **External dependencies**: Node.js built-ins, npm packages\n2. **MCP SDK imports**: `@modelcontextprotocol/sdk` components\n3. **Internal modules**: Local TypeScript modules with `.js` extension\n4. **Configuration**: Environment variables via `dotenv/config`\n\n### Module Organization\n```typescript\n// Standard import pattern:\nimport \"dotenv/config\";                    // Environment setup (first)\nimport { Server } from \"@modelcontextprotocol/sdk/server/index.js\"; // External\nimport { JellyfinClient } from \"./jellyfin.js\";  // Internal (with .js)\nimport { loadSpec } from \"./spec.js\";             // Relative imports\n```\n\n- **Absolute imports**: Not used, all internal imports are relative\n- **File extensions**: Required `.js` extensions for TypeScript imports (ESM compatibility)\n- **Dependency management**: Yarn with locked dependencies for reproducible builds\n\n## Code Structure Patterns\n\n### Module/File Organization\n```typescript\n1. Environment/configuration imports      // dotenv, config loading\n2. External library imports             // MCP SDK, axios, zod\n3. Internal module imports              // ./jellyfin.js, ./auth.js\n4. Type definitions & interfaces        // Input schemas, response types\n5. Class/function implementations       // Core business logic\n6. Helper functions                     // Utilities, mappers, transformers\n7. Main execution & exports             // Server startup, module exports\n```\n\n### Function/Method Organization\n```typescript\n- Input validation first (Zod schema parsing)\n- Authentication checks (session validation)\n- Core business logic (API calls, data processing)\n- Error handling with typed exceptions\n- Response formatting (JSON structure for MCP)\n- Clear return points with proper typing\n```\n\n### File Organization Principles\n- **Single responsibility**: Each file handles one major concern\n- **API client isolation**: `jellyfin.ts` encapsulates all Jellyfin communication\n- **Authentication separation**: `auth.ts` handles all session management\n- **Validation centralized**: `schema.ts` contains all input/output schemas\n- **Entry point simplicity**: `index.ts` orchestrates, delegates implementation\n\n## Code Organization Principles\n\n1. **MCP Protocol Compliance**: All handlers follow MCP request-response patterns\n2. **Type Safety**: Zod schemas ensure runtime validation matches TypeScript types\n3. **Authentication Flow**: Clear separation between authenticated and public operations\n4. **Error Propagation**: Consistent error handling with MCP-compatible error responses\n5. **Session Management**: Stateful authentication with graceful degradation\n\n## Module Boundaries\n\n### Core vs Extensions\n- **Core MCP Server** (`index.ts`): Protocol handling, tool registration, request routing\n- **Jellyfin Integration** (`jellyfin.ts`, `auth.ts`): External API abstraction layer\n- **Validation Layer** (`schema.ts`): Input sanitization and type enforcement\n- **Business Logic** (`ranker.ts`, `resources.ts`): Domain-specific algorithms\n\n### Public API vs Internal\n- **Public MCP Interface**: Tools and resources exposed to AI clients\n- **Internal Modules**: Implementation details hidden behind clear interfaces\n- **Configuration Layer**: Environment-based setup with sensible defaults\n- **Testing Utilities**: Isolated test harnesses for development workflow\n\n### Dependency Boundaries\n```\nMCP Client → index.ts → {jellyfin.ts, auth.ts, schema.ts} → External APIs\n                     ↘ {ranker.ts, resources.ts} ↗\nTesting utilities ← {test-*.ts} ← All modules (for integration testing)\n```\n\n## Code Size Guidelines\n\n### File Size Limits\n- **Core handlers** (`index.ts`): ~700 lines (acceptable for MCP server complexity)\n- **API clients** (`jellyfin.ts`): ~200 lines maximum per service integration\n- **Utility modules**: ~100 lines maximum to maintain focused responsibility\n- **Schema definitions**: Unlimited (data structure definitions)\n\n### Function/Method Size\n- **MCP tool handlers**: ~50 lines maximum (single tool responsibility)\n- **API client methods**: ~30 lines maximum (focused API operations)\n- **Helper functions**: ~20 lines maximum (single-purpose utilities)\n- **Error handling**: Consistent 3-5 line patterns across modules\n\n### Class/Module Complexity\n- **Maximum nesting depth**: 3 levels (readable control flow)\n- **Cyclomatic complexity**: ~10 maximum per function\n- **Interface segregation**: Multiple small interfaces over large ones\n\n## Module Dependencies & Integration\n\n### Authentication Flow\n```\nCLI/Environment → AuthenticationManager → JellyfinClient → MCP Tools\n                              ↓\n                     Session persistence (in-memory)\n                              ↓\n                     Error handling → AuthenticationRequiredError\n```\n\n### Request Processing Flow\n```\nMCP Request → index.ts handler → Input validation (schema.ts)\n                              → Authentication check (auth.ts)\n                              → Jellyfin API call (jellyfin.ts)\n                              → Response transformation\n                              → MCP Response\n```\n\n### Testing Structure\n- **Integration tests**: Full request-response cycles with live Jellyfin server\n- **Unit utilities**: Focused testing of individual components\n- **Connection testing**: Network and authentication validation\n- **Specification compliance**: Automated testing against MCP spec\n\n## Documentation Standards\n\n### Code Documentation\n- **Public APIs**: Full JSDoc comments with parameter types and examples\n- **Complex algorithms**: Inline comments explaining business logic\n- **Error conditions**: Documented exception types and recovery strategies\n- **Configuration**: Environment variable documentation with examples\n\n### Module Documentation\n- **README pattern**: Each major subsystem explains its purpose and usage\n- **API contracts**: Clear interface definitions with expected behaviors\n- **Integration guides**: Step-by-step setup and configuration instructions\n- **Security guidelines**: Authentication and credential management best practices\n\n### TypeScript Integration\n- **Strict typing**: All functions have explicit return types\n- **Interface definitions**: Shared types between modules clearly defined\n- **Generic constraints**: Type parameters properly bounded for safety\n- **Declaration files**: Generated declarations for npm package distribution\n",
  "fileStats": {
    "size": 9017,
    "lines": 193,
    "lastModified": "2025-09-29T01:04:08.155Z"
  },
  "comments": []
}