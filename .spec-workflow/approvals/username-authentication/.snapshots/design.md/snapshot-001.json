{
  "id": "snapshot_1759277235859_cq2wm7qls",
  "approvalId": "approval_1759277235848_x706q3ylj",
  "approvalTitle": "Username Authentication Design Document - Phase 2",
  "version": 1,
  "timestamp": "2025-10-01T00:07:15.859Z",
  "trigger": "initial",
  "status": "pending",
  "content": "# Design Document\n\n## Overview\n\nThe username authentication feature extends the existing Jellyfin MCP server authentication system to support username/password-based authentication through both environment variables and interactive MCP tools. This design leverages the existing `AuthenticationManager` class and integrates seamlessly with the current authentication flow, providing non-admin Jellyfin users access to the MCP server while maintaining the established security and architecture patterns.\n\nThe implementation adds environment variable fallback for automated authentication (`JELLYFIN_USERNAME`/`JELLYFIN_PASSWORD`) and introduces protocol configuration support (`HTTP`/`HTTPS`) while preserving the existing API key authentication as the primary method.\n\n## Steering Document Alignment\n\n### Technical Standards (tech.md)\n\n**Architecture Compliance:**\n- **Event-Driven MCP Server Architecture**: Extends existing request-response pattern with additional authentication fallback mechanisms\n- **Authentication Layer Integration**: Builds upon the existing pluggable authentication with enhanced session management\n- **Schema Validation**: All new inputs validated using existing Zod schema patterns\n- **TypeScript Strict Configuration**: Maintains strict type safety throughout authentication flow\n\n**Dependency Management:**\n- **Zero New Dependencies**: Leverages existing axios, zod, and MCP SDK components\n- **Existing HTTP Client**: Uses established axios patterns for Jellyfin API communication\n- **Error Handling Patterns**: Follows existing error propagation and MCP-compatible error responses\n\n**Performance Standards:**\n- **Response Time**: Username authentication within 3 seconds (meeting < 2s response requirement for API operations)\n- **Memory Usage**: In-memory session management follows existing patterns without persistent credential storage\n- **Session Validation**: Existing token validation mechanisms apply to username-authenticated sessions\n\n### Project Structure (structure.md)\n\n**Module Organization:**\n- **AuthenticationManager Extension**: Enhances existing `src/auth.ts` without breaking current interfaces\n- **Schema Integration**: Adds authentication schemas to existing `src/schema.ts` following established patterns\n- **MCP Tool Registration**: Follows existing tool handler pattern in `src/index.ts`\n- **Configuration Integration**: Uses existing environment variable patterns and MCP server initialization\n\n**Code Size Guidelines:**\n- **Enhanced AuthenticationManager**: Adds ~50 lines to existing `auth.ts` (within 200-line module limit)\n- **Schema Definitions**: Adds ~10 lines to existing `schema.ts` for input validation\n- **Tool Handler**: Existing `handleAuthenticateUser` already implements core functionality\n\n## Code Reuse Analysis\n\n### Existing Components to Leverage\n\n- **AuthenticationManager Class**: Currently implements username authentication via `authenticateUser()` method - no changes required to core authentication logic\n- **Jellyfin Client**: Existing HTTP client with proper session management and error handling patterns\n- **MCP Tool Pattern**: Established tool registration and handler implementation in `index.ts`\n- **Zod Schema Validation**: Existing schema patterns for input validation and type safety\n- **Environment Variable Handling**: Established `getEnv()` and `mustEnv()` patterns for configuration\n\n### Integration Points\n\n- **Existing Authentication Flow**: New environment variable authentication integrates into existing `getAuthentication()` method hierarchy\n- **Session Management**: Username sessions use identical `AuthSession` interface and validation patterns\n- **MCP Tool Framework**: `authenticate_user` tool already exists - no new tool registration required\n- **Error Handling**: Leverages existing `AuthenticationRequiredError` and MCP error response patterns\n- **Configuration System**: Extends existing environment variable configuration pattern\n\n## Architecture\n\nThe design follows the established MCP server architecture with minimal changes to existing components. The authentication system maintains its current three-tier priority system while adding username/password support:\n\n1. **API Key Authentication** (highest priority) - existing environment variables\n2. **Username Environment Authentication** (new middle priority) - `JELLYFIN_USERNAME`/`JELLYFIN_PASSWORD`\n3. **Interactive Authentication** (fallback) - existing `authenticate_user` tool\n\n```mermaid\ngraph TD\n    A[MCP Tool Call] --> B[getAuthentication()]\n    B --> C{In-Memory Session?}\n    C -->|Yes| D[Validate Session]\n    C -->|No| E{API Key Env Vars?}\n    E -->|Yes| F[Validate API Key]\n    E -->|No| G{Username Env Vars?}\n    G -->|Yes| H[authenticateUser with Env Vars]\n    G -->|No| I[Throw AuthenticationRequiredError]\n    F -->|Valid| J[Store Session & Continue]\n    F -->|Invalid| G\n    H -->|Success| J\n    H -->|Failure| I\n    I --> K[User calls authenticate_user tool]\n    K --> L[authenticateUser with Interactive Creds]\n    L --> J\n    D -->|Valid| M[Execute Tool]\n    D -->|Invalid| G\n    J --> M\n```\n\n### Modular Design Principles\n\n- **Single File Responsibility**: Authentication logic remains centralized in `auth.ts`\n- **Component Isolation**: New functionality extends existing components without creating new modules\n- **Service Layer Separation**: Authentication service layer (AuthenticationManager) cleanly separated from MCP tool handlers\n- **Utility Modularity**: Protocol configuration handled through existing environment variable utilities\n\n## Components and Interfaces\n\n### Enhanced AuthenticationManager\n\n- **Purpose:** Extends existing authentication manager to support username/password environment variables and protocol configuration\n- **Interfaces:** \n  - Existing: `getAuthentication()`, `authenticateUser()`, `setToken()`\n  - Enhanced: `getAuthentication()` with username env var fallback\n- **Dependencies:** axios (existing), environment variables\n- **Reuses:** Existing HTTP client, session management, token validation\n\n**New Method Integration:**\n```typescript\n// Enhanced getAuthentication() method flow:\n// 1. Check in-memory session (existing)\n// 2. Try API key env vars (existing) \n// 3. Try username env vars (NEW)\n// 4. Throw AuthenticationRequiredError (existing)\n```\n\n### Protocol Configuration Component\n\n- **Purpose:** Handle HTTP/HTTPS protocol selection through MCP configuration or environment variables\n- **Interfaces:** Protocol determination logic integrated into base URL construction\n- **Dependencies:** Environment variable parsing, URL validation\n- **Reuses:** Existing environment variable patterns, HTTP client initialization\n\n### Schema Validation Extensions\n\n- **Purpose:** Add input validation schemas for authentication parameters\n- **Interfaces:** Export authentication input schemas for tool validation\n- **Dependencies:** Zod (existing)\n- **Reuses:** Existing schema patterns and validation approach\n\n## Data Models\n\n### Enhanced AuthSession (Existing Interface)\n```typescript\ninterface AuthSession {\n  accessToken: string;\n  userId: string;\n  userName?: string;           // Already supports username from interactive auth\n  serverInfo?: {\n    name: string;\n    version: string;\n  } | undefined;\n  authenticatedAt: Date;\n}\n```\n\n### Authentication Input Schema (New)\n```typescript\nconst AuthenticateUserInput = z.object({\n  username: z.string().min(1, \"Username is required\"),\n  password: z.string().min(1, \"Password is required\"),\n});\n```\n\n### Protocol Configuration (Environment)\n```typescript\n// Environment Variables:\nJELLYFIN_BASE_URL: string     // Existing - may include protocol\nJELLYFIN_PROTOCOL: \"HTTP\"|\"HTTPS\"  // New - optional override\nJELLYFIN_USERNAME: string     // New - optional username for env auth\nJELLYFIN_PASSWORD: string     // New - optional password for env auth\n```\n\n## Error Handling\n\n### Error Scenarios\n\n1. **Username Environment Auth Failure:**\n   - **Handling:** Log failure, fallback to interactive authentication (existing pattern)\n   - **User Impact:** No visible error, falls back to interactive authentication prompt\n\n2. **Invalid Protocol Configuration:**\n   - **Handling:** Validate protocol value, error with clear message if invalid\n   - **User Impact:** Configuration error message with valid options (`HTTP`, `HTTPS`)\n\n3. **Username Interactive Auth Failure:**\n   - **Handling:** Use existing error handling in `authenticateUser()` method\n   - **User Impact:** Clear error messages (401, 403, connection errors) as currently implemented\n\n4. **Protocol/Base URL Conflict:**\n   - **Handling:** Base URL protocol takes precedence over configuration parameter\n   - **User Impact:** System uses URL protocol with optional warning log\n\n## Testing Strategy\n\n### Unit Testing\n\n**New Test Cases:**\n- Environment variable authentication with valid credentials\n- Environment variable authentication with invalid credentials  \n- Protocol configuration validation (HTTP, HTTPS, invalid values)\n- Base URL protocol precedence over configuration parameter\n- Authentication priority order (API key → username env → interactive)\n\n**Existing Tests to Verify:**\n- Interactive authentication flow remains unchanged\n- Session management and validation continues working\n- MCP tool registration and handling unaffected\n\n### Integration Testing\n\n**Authentication Flow Testing:**\n- Complete authentication chain with various credential combinations\n- Fallback behavior when primary authentication methods fail\n- Session persistence and reuse across multiple tool calls\n- Error handling and user feedback for all failure scenarios\n\n**Protocol Configuration Testing:**\n- HTTP and HTTPS connection establishment\n- Base URL parsing with and without protocol prefixes\n- Configuration parameter handling and validation\n\n### End-to-End Testing\n\n**User Scenarios:**\n1. **Environment Variable Setup**: User configures `JELLYFIN_USERNAME`/`JELLYFIN_PASSWORD` and successfully accesses library without interactive prompts\n2. **API Key Priority**: User with both API key and username environment variables - system uses API key authentication\n3. **Interactive Fallback**: User with no environment configuration successfully authenticates through `authenticate_user` tool\n4. **Protocol Security**: User configures HTTPS protocol and successfully connects to SSL-enabled Jellyfin server\n5. **Mixed Configuration**: User with partial environment configuration (username only) falls back to interactive authentication appropriately\n\n**Integration with Claude Desktop:**\n- Test complete user journey from Claude Desktop configuration through successful media library access\n- Validate error messages and user experience for authentication failures\n- Verify seamless operation with existing NPX installation workflow\n",
  "fileStats": {
    "size": 10758,
    "lines": 226,
    "lastModified": "2025-10-01T00:07:09.589Z"
  },
  "comments": []
}