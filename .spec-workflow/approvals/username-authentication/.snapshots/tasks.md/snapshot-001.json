{
  "id": "snapshot_1759334579540_o2gnu4pg3",
  "approvalId": "approval_1759334579534_glbnvm5ae",
  "approvalTitle": "Username Authentication Tasks Document - Phase 3",
  "version": 1,
  "timestamp": "2025-10-01T16:02:59.540Z",
  "trigger": "initial",
  "status": "pending",
  "content": "# Tasks Document\n\n- [ ] 1. Add authentication input schema validation in src/schema.ts\n  - File: src/schema.ts\n  - Add `AuthenticateUserInput` Zod schema for username/password validation\n  - Purpose: Provide type-safe input validation for authentication tools\n  - _Leverage: existing Zod schema patterns, z.object() structure_\n  - _Requirements: Requirement 2 (Interactive Authentication), NFR Security_\n  - _Prompt: Implement the task for spec username-authentication, first run spec-workflow-guide to get the workflow guide then implement the task: Role: TypeScript Developer specializing in schema validation and Zod | Task: Add AuthenticateUserInput schema to src/schema.ts for username/password validation following existing Zod patterns, supporting Requirement 2 interactive authentication and NFR Security requirements | Restrictions: Do not modify existing schemas, follow established naming conventions, ensure proper string validation with minimum length checks | _Leverage: existing Zod patterns in src/schema.ts, z.string().min() validation | _Requirements: Requirement 2 (Interactive Authentication), NFR Security | Success: Schema compiles without errors, validates username/password inputs correctly, follows project Zod patterns. Mark task as in-progress [-] when starting, complete [x] when finished | Instructions: Edit tasks.md to change [ ] to [-] when starting this task, then change [-] to [x] when completed_\n\n- [ ] 2. Enhance AuthenticationManager with environment variable username authentication in src/auth.ts  \n  - File: src/auth.ts\n  - Modify `getAuthentication()` method to check `JELLYFIN_USERNAME`/`JELLYFIN_PASSWORD` environment variables before interactive authentication\n  - Purpose: Add environment variable fallback authentication between API key and interactive methods\n  - _Leverage: existing `getAuthentication()` method, `authenticateUser()` method, environment variable patterns_\n  - _Requirements: Requirement 1 (Environment Variable Authentication), Requirement 4 (Session Management)_\n  - _Prompt: Implement the task for spec username-authentication, first run spec-workflow-guide to get the workflow guide then implement the task: Role: Backend Authentication Specialist with expertise in session management and credential handling | Task: Enhance getAuthentication() method in src/auth.ts to check JELLYFIN_USERNAME/JELLYFIN_PASSWORD environment variables and attempt authentication before falling back to interactive prompts, following Requirement 1 and 4 for environment authentication and session management | Restrictions: Must maintain existing authentication priority (API key first), do not store credentials beyond authentication request, preserve existing error handling patterns | _Leverage: existing getAuthentication() method structure, authenticateUser() method, process.env pattern | _Requirements: Requirement 1 (Environment Variable Authentication), Requirement 4 (Session Management) | Success: Environment username authentication works correctly, maintains authentication priority order, no credential storage, proper error handling. Mark task as in-progress [-] when starting, complete [x] when finished | Instructions: Edit tasks.md to change [ ] to [-] when starting this task, then change [-] to [x] when completed_\n\n- [ ] 3. Add protocol configuration support to server initialization in src/index.ts\n  - File: src/index.ts\n  - Enhance base URL handling to support `JELLYFIN_PROTOCOL` environment variable for HTTP/HTTPS selection\n  - Add protocol validation and smart URL construction with base URL precedence\n  - Purpose: Enable HTTP/HTTPS protocol configuration through environment variables\n  - _Leverage: existing `mustEnv()` and `getEnv()` functions, base URL initialization patterns_\n  - _Requirements: Requirement 3 (Protocol Configuration Support), NFR Security_\n  - _Prompt: Implement the task for spec username-authentication, first run spec-workflow-guide to get the workflow guide then implement the task: Role: DevOps Configuration Specialist with expertise in URL handling and protocol configuration | Task: Add JELLYFIN_PROTOCOL environment variable support to src/index.ts for HTTP/HTTPS configuration following Requirement 3, with smart base URL precedence and protocol validation | Restrictions: Base URL protocol takes precedence over configuration parameter, validate protocol values (HTTP/HTTPS only), maintain backward compatibility with existing base URL patterns | _Leverage: existing getEnv()/mustEnv() functions, baseUrl initialization, URL parsing patterns | _Requirements: Requirement 3 (Protocol Configuration Support), NFR Security | Success: Protocol configuration works correctly, URL precedence handled properly, invalid protocols rejected with clear errors. Mark task as in-progress [-] when starting, complete [x] when finished | Instructions: Edit tasks.md to change [ ] to [-] when starting this task, then change [-] to [x] when completed_\n\n- [ ] 4. Update authentication tool input validation in src/index.ts\n  - File: src/index.ts  \n  - Modify `handleAuthenticateUser` to use new `AuthenticateUserInput` schema for validation\n  - Add proper error handling for invalid authentication inputs\n  - Purpose: Ensure authentication tool uses type-safe input validation\n  - _Leverage: existing tool handler pattern, schema validation approach used in other handlers_\n  - _Requirements: Requirement 2 (Interactive Authentication), NFR Security_\n  - _Prompt: Implement the task for spec username-authentication, first run spec-workflow-guide to get the workflow guide then implement the task: Role: MCP Tool Developer with expertise in request validation and error handling | Task: Update handleAuthenticateUser function in src/index.ts to use AuthenticateUserInput schema for validation following Requirement 2 and NFR Security, maintaining existing error handling patterns | Restrictions: Must follow existing tool handler validation patterns, preserve current authentication logic, ensure proper error propagation to MCP client | _Leverage: existing tool handler patterns (handleListItems validation), schema.parse() approach, error handling structure | _Requirements: Requirement 2 (Interactive Authentication), NFR Security | Success: Authentication tool uses proper input validation, invalid inputs return clear errors, follows existing tool handler patterns. Mark task as in-progress [-] when starting, complete [x] when finished | Instructions: Edit tasks.md to change [ ] to [-] when starting this task, then change [-] to [x] when completed_\n\n- [ ] 5. Create integration tests for username environment variable authentication\n  - File: src/test-auth-env.ts (new test utility)\n  - Create test utility to verify environment variable authentication workflow  \n  - Test authentication priority order and fallback behavior\n  - Purpose: Validate complete authentication chain including environment variables\n  - _Leverage: existing test patterns in src/test-*.ts files, authentication testing approach_\n  - _Requirements: All requirements (comprehensive testing), NFR Reliability_\n  - _Prompt: Implement the task for spec username-authentication, first run spec-workflow-guide to get the workflow guide then implement the task: Role: QA Engineer with expertise in integration testing and authentication workflows | Task: Create comprehensive integration tests in src/test-auth-env.ts for environment variable authentication covering all requirements and NFR Reliability, testing authentication priority and fallback behavior | Restrictions: Must test real authentication flows without mocking core authentication logic, ensure test isolation, follow existing test utility patterns | _Leverage: existing test patterns from src/test-*.ts files, authentication manager testing approaches | _Requirements: All requirements (comprehensive testing), NFR Reliability | Success: Tests validate environment authentication works correctly, priority order tested, fallback behavior verified, tests run independently. Mark task as in-progress [-] when starting, complete [x] when finished | Instructions: Edit tasks.md to change [ ] to [-] when starting this task, then change [-] to [x] when completed_\n\n- [ ] 6. Create protocol configuration integration tests  \n  - File: src/test-protocol.ts (new test utility)\n  - Test HTTP and HTTPS protocol configuration with various base URL combinations\n  - Validate protocol precedence and error handling for invalid configurations\n  - Purpose: Ensure protocol configuration works correctly across different scenarios\n  - _Leverage: existing test patterns, connection testing utilities_\n  - _Requirements: Requirement 3 (Protocol Configuration), NFR Reliability_\n  - _Prompt: Implement the task for spec username-authentication, first run spec-workflow-guide to get the workflow guide then implement the task: Role: Network Testing Specialist with expertise in protocol testing and URL validation | Task: Create protocol configuration tests in src/test-protocol.ts covering Requirement 3 and NFR Reliability, testing HTTP/HTTPS configuration, base URL precedence, and error handling | Restrictions: Must test actual protocol behavior, validate URL construction logic, ensure test reliability across different environments | _Leverage: existing test utilities, connection testing patterns, URL validation approaches | _Requirements: Requirement 3 (Protocol Configuration), NFR Reliability | Success: Tests validate protocol configuration works correctly, URL precedence tested, error scenarios covered, tests are reliable. Mark task as in-progress [-] when starting, complete [x] when finished | Instructions: Edit tasks.md to change [ ] to [-] when starting this task, then change [-] to [x] when completed_\n\n- [ ] 7. Update documentation for username authentication in README.md\n  - File: README.md\n  - Add section documenting username environment variables (`JELLYFIN_USERNAME`, `JELLYFIN_PASSWORD`)\n  - Document protocol configuration (`JELLYFIN_PROTOCOL`) in authentication section\n  - Update examples to show both API key and username authentication methods  \n  - Purpose: Provide complete user documentation for new authentication options\n  - _Leverage: existing authentication documentation structure, environment variable examples_\n  - _Requirements: Requirement 7 (Backward Compatibility), NFR Usability_\n  - _Prompt: Implement the task for spec username-authentication, first run spec-workflow-guide to get the workflow guide then implement the task: Role: Technical Documentation Specialist with expertise in user guides and authentication documentation | Task: Update README.md with username authentication documentation following Requirement 7 and NFR Usability, adding environment variable and protocol configuration guidance while maintaining backward compatibility | Restrictions: Must preserve existing documentation structure, maintain progressive disclosure architecture, ensure clear examples for both authentication methods | _Leverage: existing authentication documentation patterns, environment variable examples in README | _Requirements: Requirement 7 (Backward Compatibility), NFR Usability | Success: Documentation is clear and comprehensive, covers all authentication methods, maintains existing structure, provides practical examples. Mark task as in-progress [-] when starting, complete [x] when finished | Instructions: Edit tasks.md to change [ ] to [-] when starting this task, then change [-] to [x] when completed_\n",
  "fileStats": {
    "size": 11486,
    "lines": 64,
    "lastModified": "2025-10-01T16:02:53.344Z"
  },
  "comments": []
}